/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import snmp.SNMPGetException;

/**
 *
 * @author Praktikant
 */
public class MainInterface extends javax.swing.JFrame {
    private MainInterfaceWrapper wrapper;
    private IridaBindingGroup ibg;
    /**
     * Creates new form NewMainJFrame
     */
    public MainInterface() throws SNMPGetException, Exception {
        initComponents();
        
        wrapper = new MainInterfaceWrapper();
        ibg = new IridaBindingGroup(wrapper);
        
        ibg.add("ip", fieldIp);
        ibg.add("community", fieldCommunity);
        
        ArrayList<BindingColumn> listTableSwitches = new ArrayList<BindingColumn>();
        listTableSwitches.add(new BindingColumn("ip"));
        listTableSwitches.add(new BindingColumn("model"));
        listTableSwitches.add(new BindingColumn("gatewayMac"));
        //listTableSwitches.add(new BindingColumn("status"));
        ibg.add("curSwitch", "switches", listTableSwitches, tableSwitches);
        
        
        
        ArrayList<BindingColumn> listTableVlans = new ArrayList<BindingColumn>();
        listTableVlans.add(new BindingColumn("vlanNbr"));
        listTableVlans.add(new BindingColumn("gatewayMacCheck"));
        listTableVlans.add(new BindingColumn("macCount"));
        ibg.add("vlan", "curSwitch.vlans", listTableVlans, tableVlans);

        ArrayList<BindingColumn> listTableMacs = new ArrayList<BindingColumn>();
        listTableMacs.add(new BindingColumn("address"));
        ibg.add("mac", "vlan.macs", listTableMacs, tableMacs);
        
        
        
        
        ArrayList<BindingColumn> listTablePorts = new ArrayList<BindingColumn>();
        listTablePorts.add(new BindingColumn("portNbr"));
        listTablePorts.add(new BindingColumn("portName"));
        listTablePorts.add(new BindingColumn("vlanSize"));
        listTablePorts.add(new BindingColumn("vlansString"));
        ibg.add("port", "curSwitch.ports", listTablePorts, tablePorts);
        
        ArrayList<BindingColumn> listTablePortVlans = new ArrayList<BindingColumn>();
        listTablePortVlans.add(new BindingColumn("vlanNbr"));
        ibg.add("vlanOnPort", "port.vlans", listTablePortVlans, tablePortVlans);
        
        

        ArrayList<BindingColumn> listTablePortToVlan = new ArrayList<BindingColumn>();
        listTablePortToVlan.add(new BindingColumn("portNbr"));
        listTablePortToVlan.add(new BindingColumn("portName"));
        listTablePortToVlan.add(new BindingColumn("vlanNbr"));
        listTablePortToVlan.add(new BindingColumn("macsSize"));
        ibg.add("portToVlan", "curSwitch.vlanToPortList", listTablePortToVlan, tablePortToVlan);
        //ibg.add("portToVlan", "vlanToPortList", listTablePortToVlan, tablePortToVlan);
        
        ArrayList<BindingColumn> listTableMacsPort = new ArrayList<BindingColumn>();
        listTableMacsPort.add(new BindingColumn("address"));
        ibg.add("portMac", "portToVlan.macs", listTableMacsPort, tableMacsPort);
        
        
        
        ArrayList<BindingColumn> listTableSwitchConnections = new ArrayList<BindingColumn>();
        listTableSwitchConnections.add(new BindingColumn("switchUp.ip"));
        listTableSwitchConnections.add(new BindingColumn("upPort.portNbr"));
        listTableSwitchConnections.add(new BindingColumn("switchDown.ip"));
        listTableSwitchConnections.add(new BindingColumn("downPort.portNbr"));
        listTableSwitchConnections.add(new BindingColumn("vlanErrorsString"));
        ibg.add("curSwitchConnection", "switchConnections", listTableSwitchConnections, tableSwitchConnections);
        
        ArrayList<BindingColumn> listTableUplinkDownlink = new ArrayList<BindingColumn>();
        listTableUplinkDownlink.add(new BindingColumn("switchIp"));
        listTableUplinkDownlink.add(new BindingColumn("portNbr"));
        listTableUplinkDownlink.add(new BindingColumn("isUplink"));
        listTableUplinkDownlink.add(new BindingColumn("problemVlans"));
        ibg.add("badPort", "badPorts", listTableUplinkDownlink, tableUplinkDownlink);
        
       
        ibg.bind();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInput = new javax.swing.JPanel();
        checkBtn = new javax.swing.JToggleButton();
        fieldIp = new javax.swing.JTextField();
        labelIp = new javax.swing.JLabel();
        labelCommunity = new javax.swing.JLabel();
        fieldCommunity = new javax.swing.JTextField();
        refreshSwitch = new javax.swing.JButton();
        panelVlanErrors = new javax.swing.JPanel();
        scrollpaneSwitchConnections = new javax.swing.JScrollPane();
        tableSwitchConnections = new javax.swing.JTable();
        scrollpaneUplinkDownlink = new javax.swing.JScrollPane();
        tableUplinkDownlink = new javax.swing.JTable();
        panelAllSwitches = new javax.swing.JPanel();
        scrollpaneSwitches = new javax.swing.JScrollPane();
        tableSwitches = new javax.swing.JTable();
        panelSelectedSwitch = new javax.swing.JPanel();
        scrollpaneVlans = new javax.swing.JScrollPane();
        tableVlans = new javax.swing.JTable();
        scrollpaneMacs = new javax.swing.JScrollPane();
        tableMacs = new javax.swing.JTable();
        scrollpanePorts = new javax.swing.JScrollPane();
        tablePorts = new javax.swing.JTable();
        scrollpanePortVlans = new javax.swing.JScrollPane();
        tablePortVlans = new javax.swing.JTable();
        scrollpanePortToVlan = new javax.swing.JScrollPane();
        tablePortToVlan = new javax.swing.JTable();
        scrollpaneMacsPort = new javax.swing.JScrollPane();
        tableMacsPort = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelInput.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));

        checkBtn.setText("check");
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        fieldIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldIpActionPerformed(evt);
            }
        });

        labelIp.setText("IP");

        labelCommunity.setText("Community");

        refreshSwitch.setText("refresh");
        refreshSwitch.setEnabled(false);
        refreshSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshSwitchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInputLayout = new javax.swing.GroupLayout(panelInput);
        panelInput.setLayout(panelInputLayout);
        panelInputLayout.setHorizontalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(labelIp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fieldIp, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCommunity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshSwitch, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelInputLayout.setVerticalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelIp)
                    .addComponent(labelCommunity)
                    .addComponent(fieldCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBtn)
                    .addComponent(refreshSwitch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelVlanErrors.setBorder(javax.swing.BorderFactory.createTitledBorder("Vlan errors"));

        tableSwitchConnections.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpaneSwitchConnections.setViewportView(tableSwitchConnections);

        tableUplinkDownlink.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpaneUplinkDownlink.setViewportView(tableUplinkDownlink);

        javax.swing.GroupLayout panelVlanErrorsLayout = new javax.swing.GroupLayout(panelVlanErrors);
        panelVlanErrors.setLayout(panelVlanErrorsLayout);
        panelVlanErrorsLayout.setHorizontalGroup(
            panelVlanErrorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVlanErrorsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVlanErrorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollpaneSwitchConnections, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                    .addComponent(scrollpaneUplinkDownlink))
                .addContainerGap())
        );
        panelVlanErrorsLayout.setVerticalGroup(
            panelVlanErrorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVlanErrorsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollpaneSwitchConnections, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollpaneUplinkDownlink, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
        );

        panelAllSwitches.setBorder(javax.swing.BorderFactory.createTitledBorder("All switches"));

        tableSwitches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpaneSwitches.setViewportView(tableSwitches);

        javax.swing.GroupLayout panelAllSwitchesLayout = new javax.swing.GroupLayout(panelAllSwitches);
        panelAllSwitches.setLayout(panelAllSwitchesLayout);
        panelAllSwitchesLayout.setHorizontalGroup(
            panelAllSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllSwitchesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollpaneSwitches, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelAllSwitchesLayout.setVerticalGroup(
            panelAllSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllSwitchesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollpaneSwitches, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelSelectedSwitch.setBorder(javax.swing.BorderFactory.createTitledBorder("Current switch"));

        tableVlans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpaneVlans.setViewportView(tableVlans);

        tableMacs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpaneMacs.setViewportView(tableMacs);

        tablePorts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpanePorts.setViewportView(tablePorts);

        tablePortVlans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpanePortVlans.setViewportView(tablePortVlans);

        tablePortToVlan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpanePortToVlan.setViewportView(tablePortToVlan);

        tableMacsPort.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollpaneMacsPort.setViewportView(tableMacsPort);

        javax.swing.GroupLayout panelSelectedSwitchLayout = new javax.swing.GroupLayout(panelSelectedSwitch);
        panelSelectedSwitch.setLayout(panelSelectedSwitchLayout);
        panelSelectedSwitchLayout.setHorizontalGroup(
            panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectedSwitchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollpanePorts)
                    .addComponent(scrollpaneVlans)
                    .addComponent(scrollpanePortToVlan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollpanePortVlans, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrollpaneMacsPort, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrollpaneMacs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        panelSelectedSwitchLayout.setVerticalGroup(
            panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectedSwitchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollpaneMacs, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(scrollpaneVlans, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollpanePorts, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(scrollpanePortVlans, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSelectedSwitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollpanePortToVlan, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(scrollpaneMacsPort, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelVlanErrors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelAllSwitches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSelectedSwitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelVlanErrors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAllSwitches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(panelSelectedSwitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
       try {
          wrapper.checkSwitch();
          refreshSwitch.setEnabled(true);
       } catch (Exception ex) {
          Utility.showTimeoutError();
          throw new RuntimeException(ex);
       }
    
    }//GEN-LAST:event_checkBtnActionPerformed

    private void fieldIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldIpActionPerformed

    private void refreshSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshSwitchActionPerformed
        // TODO add your handling code here:
        try {
            wrapper.refreshCurSwitch();
        } catch(Exception ex) {
            Utility.showTimeoutError();
            throw new RuntimeException(ex);
        }
    }//GEN-LAST:event_refreshSwitchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainInterface().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton checkBtn;
    private javax.swing.JTextField fieldCommunity;
    private javax.swing.JTextField fieldIp;
    private javax.swing.JLabel labelCommunity;
    private javax.swing.JLabel labelIp;
    private javax.swing.JPanel panelAllSwitches;
    private javax.swing.JPanel panelInput;
    private javax.swing.JPanel panelSelectedSwitch;
    private javax.swing.JPanel panelVlanErrors;
    private javax.swing.JButton refreshSwitch;
    private javax.swing.JScrollPane scrollpaneMacs;
    private javax.swing.JScrollPane scrollpaneMacsPort;
    private javax.swing.JScrollPane scrollpanePortToVlan;
    private javax.swing.JScrollPane scrollpanePortVlans;
    private javax.swing.JScrollPane scrollpanePorts;
    private javax.swing.JScrollPane scrollpaneSwitchConnections;
    private javax.swing.JScrollPane scrollpaneSwitches;
    private javax.swing.JScrollPane scrollpaneUplinkDownlink;
    private javax.swing.JScrollPane scrollpaneVlans;
    private javax.swing.JTable tableMacs;
    private javax.swing.JTable tableMacsPort;
    private javax.swing.JTable tablePortToVlan;
    private javax.swing.JTable tablePortVlans;
    private javax.swing.JTable tablePorts;
    private javax.swing.JTable tableSwitchConnections;
    private javax.swing.JTable tableSwitches;
    private javax.swing.JTable tableUplinkDownlink;
    private javax.swing.JTable tableVlans;
    // End of variables declaration//GEN-END:variables
}
